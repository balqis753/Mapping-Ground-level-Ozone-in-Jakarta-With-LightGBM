# -*- coding: utf-8 -*-
"""TOTO WOLFF .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zYFo4pXn_TBa7OMGDUWxPQPD_MdXd0yf

# Library yang Dibutuhkan
"""

!pip install xarray rasterio geopandas pykrige matplotlib netCDF4
!pip install scikit-gstat
!pip install -U scikit-learn
!pip install rioxarray
!pip install geemap
!pip install gdal
!pip install pykrige
!pip install cartopy

import xarray as xr
import rioxarray
import numpy as np
import pandas as pd
import os
import rasterio
import geopandas as gpd
import matplotlib.pyplot as plt
import geemap
import geemap.foliumap as eefolium
import warnings # Import the warnings module
warnings.filterwarnings('ignore')
import ee
import seaborn as sns

from pykrige.ok import OrdinaryKriging
from skgstat import Variogram
from google.colab import drive
from sklearn.preprocessing import MinMaxScaler
from osgeo import gdal # gdal is imported here.
from rasterio.transform import from_origin
from pykrige.ok import OrdinaryKriging
from scipy.interpolate import Rbf
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from shapely.geometry import Point


drive.mount('/content/drive')

print("Setup completed")

!pip install geemap
!pip install pycrs
!pip install optuna
!pip install lightgbm
!pip install rioxarray
!pip install xarray rasterio geopandas pykrige matplotlib
!pip install scikit-gstat
!pip install -U scikit-learn
!pip install gdal
!pip install cartopy

# Import packages
import ee
import geemap
import geemap.foliumap as eefolium
import xarray as xr
import numpy as np
import pandas as pd
import seaborn as sns
import geopandas as gpd
import matplotlib.pyplot as plt
import rasterio
import lightgbm as lgb
import optuna
import os
import rioxarray as rxr
from IPython.display import display, Image
import matplotlib.dates as mdates
from pykrige.ok import OrdinaryKriging
from shapely.geometry import Point
from rasterio.features import rasterize
from rasterio.transform import from_origin
from rasterio.plot import show
from scipy.ndimage import zoom
from rasterio import features
from scipy.interpolate import griddata
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
from sklearn.model_selection import TimeSeriesSplit
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from lightgbm import LGBMRegressor
from sklearn.model_selection import cross_validate, KFold
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler, MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score ,mean_absolute_percentage_error
import warnings # Import the warnings module
warnings.filterwarnings('ignore')
from skgstat import Variogram
from osgeo import gdal
from shapely.geometry import Point

"""# EVI (done)"""

# Melakukan autentikasi dan mendefinisikan Google Cloud Project yang akan digunakan
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")
#AOI= ee.FeatureCollection("projects/ee-sidangapril2024/assets/DKI_JAKARTA")
Map.addLayer(AOI, {}, "AOI")
Map.centerObject(AOI, 8)


Map = geemap.Map()
Map

# -----------
# PENGUNDUHAN
#------------


# 1. Parameter & Konfigurasi
# -------------------------------

# Dataset MODIS EVI (MOD13A2 - 16-harian, resolusi 1 km)
EVI_collection = ee.ImageCollection("MODIS/061/MOD13A2")

# Tahun dan bulan target
years = list(range(2022, 2025))  # 2022‚Äì2024
months = list(range(1, 13))

# 2. Buat EVI Rata-rata Bulanan
# -------------------------------
EVI_monthly_images = []

for y in years:
    for m in months:
        # Filter koleksi untuk tahun dan bulan
        filtered = EVI_collection \
            .filter(ee.Filter.calendarRange(y, y, 'year')) \
            .filter(ee.Filter.calendarRange(m, m, 'month'))

        # Hitung rata-rata dan konversi EVI (skala asli: 0.0001)
        monthly_evi = filtered.select('EVI') \
            .mean() \
            .multiply(0.0001) \
            .rename('EVI') \
            .clip(AOI) \
            .set('year', y) \
            .set('month', m) \
            .set('system:time_start', ee.Date.fromYMD(y, m, 1)) \
            .set('label', f"EVI_{y:04d}_{m:02d}")

        EVI_monthly_images.append(monthly_evi)
        print(f"Processed: {monthly_evi.get('label').getInfo()}")


# Tampilkan salah satu bulan (misalnya Januari 2023)
sample_image = next(img for img in EVI_monthly_images if img.get('label').getInfo() == "EVI_2023_01")

Map = geemap.Map(center=[-6.2, 106.85], zoom=9)  # Jakarta
Map.addLayer(sample_image, {
    'min': 0,
    'max': 1,
    'palette': ['ffffff', 'ccebc5', '7bccc4', '2b8cbe', '00441b']
}, 'EVI Jan 2023')
Map.addLayer(AOI, {}, 'AOI')
Map.add_colorbar(vis_params={
    'min': 0,
    'max': 1,
    'palette': ['ffffff', 'ccebc5', '7bccc4', '2b8cbe', '00441b']
}, label='EVI')

Map

# -------------------------------
# PENYIMPANAN
# -------------------------------
for image in EVI_monthly_images:
    label = image.get('label').getInfo()
    task = ee.batch.Export.image.toDrive(
        image=image,
        description=label,
        folder='MODIS_EVI_Monthly',
        fileNamePrefix=label,
        scale=1000,
        region=AOI,
        crs='EPSG:32748',  # Sesuaikan dengan lokasi (misalnya UTM zona Indonesia)
        maxPixels=1e13
    )
    task.start()
    print(f"Tugas ekspor '{label}' telah dimulai.")

# -------------------------------
# MELIHAT MISSING VALUE
# -------------------------------

def add_valid_ratio(image):

    band_name = 'EVI'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=1000,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio.multiply(100))  # dalam persen
    return image

EVI_with_ratios = ee.ImageCollection(EVI_monthly_images).map(add_valid_ratio)

def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

# Ubah ke FeatureCollection
missing_ratio_fc = EVI_with_ratios.map(image_to_feature)

# Tampilkan hasil di konsol
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

from scipy.ndimage import median_filter

import rasterio
import numpy as np
import matplotlib.pyplot as plt
import glob
import os

# Path input dan output
input_folder = "/content/drive/MyDrive/path/to/your/tifs"
output_path = "/content/drive/MyDrive/path/to/output/stacked.tif"

# Ambil semua file .tif dan urutkan
tif_files = sorted(glob.glob(os.path.join(input_folder, "*.tif")))

# Stack array
arrays = []
meta = None
for i, file in enumerate(tif_files):
    with rasterio.open(file) as src:
        if meta is None:
            meta = src.meta.copy()
        arrays.append(src.read(1))  # hanya ambil band pertama

# Stack ke array 3D (bands, height, width)
stacked_array = np.stack(arrays, axis=0)

# Update metadata untuk multi-band
meta.update({
    "count": len(arrays)
})

# Simpan ke file output
with rasterio.open(output_path, "w", **meta) as dst:
    dst.write(stacked_array)

print(f"‚úÖ File berhasil di-stack dan disimpan ke: {output_path}")

# --- Informasi Data ---
print("üìä Informasi Raster Stacked:")
print(f"Jumlah Band (misal jumlah bulan): {stacked_array.shape[0]}")
print(f"Tinggi x Lebar per band: {stacked_array.shape[1]} x {stacked_array.shape[2]}")
print(f"Resolusi spasial: {meta['transform'][0]} x {abs(meta['transform'][4])}")
print(f"CRS: {meta['crs']}")

# --- Visualisasi Band Pertama, Kedua, Ketiga ---
num_to_show = min(3, stacked_array.shape[0])  # maksimal 3 band ditampilkan
fig, axs = plt.subplots(1, num_to_show, figsize=(15, 5))

for i in range(num_to_show):
    im = axs[i].imshow(stacked_array[i], cmap="viridis")
    axs[i].set_title(f"Band {i+1}")
    plt.colorbar(im, ax=axs[i], fraction=0.046)

plt.suptitle("üñºÔ∏è Visualisasi Beberapa Band dari Raster Stacked", fontsize=16)
plt.tight_layout()
plt.show()

# -------------------------------
# INTERPOLATE MISSING VALUE
# -------------------------------


# Load EVI data (e.g., from MOD11A1)
file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVIf'

# Check if the file exists
if not os.path.exists(file_path):
    raise FileNotFoundError(f"File not found: {file_path}")

ds = gdal.Open(file_path)
# Check if gdal.Open was successful
if ds is None:
    raise IOError(f"Unable to open file with GDAL: {file_path}")

evi = ds.ReadAsArray().astype(float)
evi[evi == 0] = np.nan


# Get coordinates
x = np.arange(evi.shape[1], dtype=float)
y = np.arange(evi.shape[0], dtype=float)

xv, yv = np.meshgrid(x, y)

# Flatten
x_flat = xv.flatten()
y_flat = yv.flatten()
z_flat = evi.flatten()

# Filter out NaNs
valid = ~np.isnan(z_flat)
x_valid = x_flat[valid]
y_valid = y_flat[valid]
z_valid = z_flat[valid]

# Fit Kriging model
ok = OrdinaryKriging(
    x_valid, y_valid, z_valid,
    variogram_model='gaussian',
    nlags=6,
    weight=True,
    verbose=False,
    enable_plotting=True  # <= Ini penting agar bisa plot variogram!
)

# Interpolate full grid
z_interp, ss = ok.execute('grid', x, y)
z_interp_clamped = np.clip(z_interp, 0, 1)

# Replace NaNs in original with kriged result
evi_filled = np.where(np.isnan(evi), z_interp_clamped, evi)
evi_filled_smooth = median_filter(evi_filled, size=3)


# Visualisasi
fig, ax = plt.subplots(1, 2, figsize=(14, 6))

im1 = ax[0].imshow(evi, cmap='YlGn', vmin=0, vmax=1)
ax[0].set_title('Sebelum Kriging (EVI Banyak NA)')
plt.colorbar(im1, ax=ax[0], label='EVI')

im2 = ax[1].imshow(evi_filled, cmap='YlGn', vmin=0, vmax=1)
ax[1].set_title('Sesudah Kriging (NA Terisi)')
plt.colorbar(im2, ax=ax[1], label='EVI')

plt.tight_layout()
plt.show()

# -----------------------------------
# INTERPOLATE MISSING VALUE (36 tif)
# ----------------------------------

import os
from glob import glob
import numpy as np
import matplotlib.pyplot as plt
from osgeo import gdal
from pykrige.ok import OrdinaryKriging
from scipy.ndimage import median_filter
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# === Folder ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI'
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/NAN'
os.makedirs(output_folder, exist_ok=True)

# === Ambil semua file .tif ===
file_list = sorted(glob(os.path.join(input_folder, '*.tif')))


# Simpan hasil evaluasi
eval_results = []

# === Loop tiap file ===
for file_path in file_list:
    filename = os.path.basename(file_path)
    print(f"üîÑ Memproses: {filename}")

    ds = gdal.Open(file_path)
    if ds is None:
        print(f"‚ùå Gagal membuka: {file_path}")
        continue

    evi = ds.ReadAsArray().astype(float)
    evi[evi == 0] = np.nan

    x = np.arange(evi.shape[1], dtype=float)
    y = np.arange(evi.shape[0], dtype=float)
    xv, yv = np.meshgrid(x, y)

    x_flat = xv.flatten()
    y_flat = yv.flatten()
    z_flat = evi.flatten()

    valid_mask = ~np.isnan(z_flat)
    if valid_mask.sum() < 10:
        print(f"‚ö†Ô∏è Terlalu banyak missing value: {filename}")
        continue

    x_valid = x_flat[valid_mask]
    y_valid = y_flat[valid_mask]
    z_valid = z_flat[valid_mask]

    # Kriging
    ok = OrdinaryKriging(
        x_valid, y_valid, z_valid,
        variogram_model='gaussian',
        nlags=6,
        verbose=False,
        enable_plotting=False
    )

    z_interp, _ = ok.execute('grid', x, y)
    z_interp_clamped = np.clip(z_interp, 0, 1)

    # Interpolated result
    evi_filled = np.where(np.isnan(evi), z_interp_clamped, evi)
    evi_filled_smooth = median_filter(evi_filled, size=3)

    # Evaluasi hanya di lokasi yang awalnya NaN
    missing_mask = np.isnan(evi)
    interpolated_values = z_interp_clamped[missing_mask]
    filled_values = evi_filled_smooth[missing_mask]

    # Sampling beberapa titik valid ground truth dari sekitar
    sample_mask = ~np.isnan(evi)
    sampled_real = evi[sample_mask]
    sampled_filled = evi_filled_smooth[sample_mask]

    # Evaluasi statistik
    mae = mean_absolute_error(sampled_real, sampled_filled)
    rmse = np.sqrt(mean_squared_error(sampled_real, sampled_filled))
    r2 = r2_score(sampled_real, sampled_filled)
    std_orig = np.nanstd(evi)
    std_interp = np.nanstd(evi_filled_smooth)

    eval_results.append({
        "filename": filename,
        "RMSE": rmse,
        "MAE": mae,
        "R2": r2,
        "Std_Original": std_orig,
        "Std_Filled": std_interp
    })

    # Simpan hasil raster
    driver = gdal.GetDriverByName('GTiff')
    out_path = os.path.join(output_folder, f"kriged_{filename}")
    out_ds = driver.Create(out_path, ds.RasterXSize, ds.RasterYSize, 1, gdal.GDT_Float32)
    out_ds.SetGeoTransform(ds.GetGeoTransform())
    out_ds.SetProjection(ds.GetProjection())
    out_band = out_ds.GetRasterBand(1)
    out_band.WriteArray(evi_filled_smooth)
    out_band.SetNoDataValue(np.nan)
    out_band.FlushCache()

    print(f"‚úÖ Selesai: {filename} ‚Üí {out_path}")
    print(f"    üìä RMSE={rmse:.4f}, MAE={mae:.4f}, R¬≤={r2:.4f}, Std_Original={std_orig:.4f}, Std_Filled={std_interp:.4f}")

# Simpan hasil evaluasi ke CSV
import pandas as pd
eval_df = pd.DataFrame(eval_results)
eval_csv_path = os.path.join(output_folder, 'evaluasi_interpolasi.csv')
eval_df.to_csv(eval_csv_path, index=False)
print(f"\nüìÅ Hasil evaluasi disimpan: {eval_csv_path}")

# ------------------------------------
# INTERPOLATE MISSING VALUE (2024-12)
# ------------------------------------

import os
from glob import glob
import numpy as np
import matplotlib.pyplot as plt
from osgeo import gdal
from pykrige.ok import OrdinaryKriging
from scipy.ndimage import median_filter
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# === Folder ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI'
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24'
os.makedirs(output_folder, exist_ok=True)

# === Ambil semua file .tif ===
file_list = sorted(glob(os.path.join(input_folder, '*.tif')))
# Filter hanya untuk file Desember 2024
file_list = [f for f in file_list if '2024_12' in os.path.basename(f)]



# Simpan hasil evaluasi
eval_results = []

# === Loop tiap file ===
for file_path in file_list:
    filename = os.path.basename(file_path)
    print(f"üîÑ Memproses: {filename}")

    ds = gdal.Open(file_path)
    if ds is None:
        print(f"‚ùå Gagal membuka: {file_path}")
        continue

    evi = ds.ReadAsArray().astype(float)
    evi[evi == 0] = np.nan

    x = np.arange(evi.shape[1], dtype=float)
    y = np.arange(evi.shape[0], dtype=float)
    xv, yv = np.meshgrid(x, y)

    x_flat = xv.flatten()
    y_flat = yv.flatten()
    z_flat = evi.flatten()

    valid_mask = ~np.isnan(z_flat)
    if valid_mask.sum() < 10:
        print(f"‚ö†Ô∏è Terlalu banyak missing value: {filename}")
        continue

    x_valid = x_flat[valid_mask]
    y_valid = y_flat[valid_mask]
    z_valid = z_flat[valid_mask]

    # Kriging
    ok = OrdinaryKriging(
        x_valid, y_valid, z_valid,
        variogram_model='gaussian',
        nlags=6,
        verbose=False,
        enable_plotting=False
    )

    z_interp, _ = ok.execute('grid', x, y)
    z_interp_clamped = np.clip(z_interp, 0, 1)

    # Interpolated result
    evi_filled = np.where(np.isnan(evi), z_interp_clamped, evi)
    evi_filled_smooth = median_filter(evi_filled, size=3)

    # Evaluasi hanya di lokasi yang awalnya NaN
    missing_mask = np.isnan(evi)
    interpolated_values = z_interp_clamped[missing_mask]
    filled_values = evi_filled_smooth[missing_mask]

    # Sampling beberapa titik valid ground truth dari sekitar
    sample_mask = ~np.isnan(evi)
    sampled_real = evi[sample_mask]
    sampled_filled = evi_filled_smooth[sample_mask]

    # Evaluasi statistik
    mae = mean_absolute_error(sampled_real, sampled_filled)
    rmse = np.sqrt(mean_squared_error(sampled_real, sampled_filled))
    r2 = r2_score(sampled_real, sampled_filled)
    std_orig = np.nanstd(evi)
    std_interp = np.nanstd(evi_filled_smooth)

    eval_results.append({
        "filename": filename,
        "RMSE": rmse,
        "MAE": mae,
        "R2": r2,
        "Std_Original": std_orig,
        "Std_Filled": std_interp
    })

    # Simpan hasil raster
    driver = gdal.GetDriverByName('GTiff')
    out_path = os.path.join(output_folder, f"kriged_{filename}")
    out_ds = driver.Create(out_path, ds.RasterXSize, ds.RasterYSize, 1, gdal.GDT_Float32)
    out_ds.SetGeoTransform(ds.GetGeoTransform())
    out_ds.SetProjection(ds.GetProjection())
    out_band = out_ds.GetRasterBand(1)
    out_band.WriteArray(evi_filled_smooth)
    out_band.SetNoDataValue(np.nan)
    out_band.FlushCache()

    print(f"‚úÖ Selesai: {filename} ‚Üí {out_path}")
    print(f"    üìä RMSE={rmse:.4f}, MAE={mae:.4f}, R¬≤={r2:.4f}, Std_Original={std_orig:.4f}, Std_Filled={std_interp:.4f}")

# Simpan hasil evaluasi ke CSV
import pandas as pd
eval_df = pd.DataFrame(eval_results)
eval_csv_path = os.path.join(output_folder, 'evaluasi_interpolasi.csv')
eval_df.to_csv(eval_csv_path, index=False)
print(f"\nüìÅ Hasil evaluasi disimpan: {eval_csv_path}")

from skimage.transform import resize

#-----------------------------
# STACK FILE INTERPOLATED NAN
#-----------------------------
import rasterio
from rasterio.merge import merge
import numpy as np
import os
from glob import glob

# === PATH FOLDER ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/NAN'
stacked_output_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/NAN/Stack.tif'

# === Ambil semua file tif ===
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === Stack manual jadi multiband ===
src_files_to_mosaic = [rasterio.open(fp) for fp in raster_files]
meta = src_files_to_mosaic[0].meta.copy()
meta.update(count=len(raster_files))  # update jumlah band

# Buat array kosong untuk stack
stacked_array = np.stack([src.read(1) for src in src_files_to_mosaic])

# Simpan jadi 1 file multiband
with rasterio.open(stacked_output_path, 'w', **meta) as dst:
    for idx in range(stacked_array.shape[0]):
        dst.write(stacked_array[idx], idx + 1)

print(f"‚úÖ Stacked to: {stacked_output_path}")

#-------------------------
# MENGECEK ISI FILE
#-------------------------

import rasterio
import numpy as np
import matplotlib.pyplot as plt

# Path ke file raster stack (multiband)
stacked_file = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/CLIP/Jakarta_EVI_Stack_22-24.tif'

# Buka file
with rasterio.open(stacked_file) as src:
    print("=== Informasi File Stack ===")
    print(f"Jumlah Band   : {src.count}")
    print(f"Ukuran (Width x Height): {src.width} x {src.height}")
    print(f"CRS           : {src.crs}")
    print(f"Transform     : {src.transform}")
    print(f"TIPE DATA     : {src.dtypes[0]}")
    print()

    # Cek statistik per band
    for i in range(1, src.count + 1):
        band = src.read(i)
        print(f"Band {i:02d} - min: {np.nanmin(band):.4f}, max: {np.nanmax(band):.4f}, mean: {np.nanmean(band):.4f}")

    # Visualisasi beberapa band (1, tengah, akhir)
    fig, axs = plt.subplots(1, 3, figsize=(15, 5))
    bands_to_show = [1, src.count // 2, src.count]
    for i, b in enumerate(bands_to_show):
        image = src.read(b)
        axs[i].imshow(image, cmap='viridis')
        axs[i].set_title(f"Band {b}")
        axs[i].axis('off')
    plt.tight_layout()
    plt.show()

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/Stack'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/LSTEVI-MODIS_22&24/EVI/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

# Load EVI data (e.g., from MOD11A1)
file_path = '/content/drive/MyDrive/MODIS_EVI_Monthly/EVI_2022_01.tif'

# Check if the file exists
if not os.path.exists(file_path):
    raise FileNotFoundError(f"File not found: {file_path}")

ds = gdal.Open(file_path)
# Check if gdal.Open was successful
if ds is None:
    raise IOError(f"Unable to open file with GDAL: {file_path}")

evi = ds.ReadAsArray().astype(float)
evi[evi == 0] = np.nan  # MODIS sometimes stores fill values as 0

evi_resized = resize(evi, (evi.shape[0]//2, evi.shape[1]//2), anti_aliasing=True)

print("Jumlah total piksel:", evi.size)
print("Jumlah data valid:", np.sum(~np.isnan(evi)))
print("Persentase NA:", np.sum(np.isnan(evi)) / evi.size * 100, "%")

# =========================================
# 1. Flatten data sebelum & sesudah kriging
# =========================================
original_flat = evi.flatten()         # Ganti 'evi' jika kamu pakai LST
filled_flat = evi_filled.flatten()

# ============================
# 2. Buat koordinat piksel
# ============================
x_coords = xv.flatten()
y_coords = yv.flatten()

# ============================
# 3. Buat DataFrame gabungan
# ============================
df_compare = pd.DataFrame({
    'x': x_coords,
    'y': y_coords,
    'value_before': original_flat,
    'value_after': filled_flat
})

# (Opsional) Tampilkan jumlah NaN sebelum dan sesudah
print("\nJumlah NaN sebelum kriging:", df_compare['value_before'].isna().sum())
print("Jumlah NaN sesudah kriging:", df_compare['value_after'].isna().sum())

# Set up figure and subplots
fig, ax = plt.subplots(1, 2, figsize=(14, 6))

# Plot original EVI with NaNs
im1 = ax[0].imshow(evi, cmap='YlGn', interpolation='none', vmin=0, vmax=1)  # Use 'YlGn' for EVI
ax[0].set_title("Original EVI (with NaNs)")
fig.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

# Plot kriging-filled EVI
im2 = ax[1].imshow(evi_filled, cmap='YlGn', interpolation='none', vmin=0, vmax=1)  # Use 'YlGn' for EVI
ax[1].set_title("EVI after Kriging Interpolation")
fig.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

plt.tight_layout()
plt.show()

import numpy as np
from sklearn.metrics import mean_squared_error, r2_score

# 1. Flatten data before & after kriging
original_flat = evi.flatten()
filled_flat = evi_filled.flatten()

# 2. Filter out NaNs for comparison
valid_indices = ~np.isnan(original_flat)  # Find indices where original data is not NaN
original_valid = original_flat[valid_indices]
filled_valid = filled_flat[valid_indices]  # Use the same indices for filled data

# 3. Calculate metrics
rmse = np.sqrt(mean_squared_error(original_valid, filled_valid))
mae = np.mean(np.abs(original_valid - filled_valid))
r2 = r2_score(original_valid, filled_valid)

# 4. Calculate standard deviations
std_original = np.std(original_valid)
std_filled = np.std(filled_valid)

# 5. Print the results
print("Evaluation Metrics:")
print(f"RMSE: {rmse:.4f}")
print(f"MAE: {mae:.4f}")
print(f"R¬≤: {r2:.4f}")
print(f"Standard Deviation (Original): {std_original:.4f}")
print(f"Standard Deviation (Filled): {std_filled:.4f}")

import os
import numpy as np
import rasterio
from rasterio.mask import mask
from glob import glob
import geopandas as gpd
import matplotlib.pyplot as plt

#---------------------
# CLIP
#---------------------


# ===================== PATH INPUT =====================
# Ganti path berikut sesuai lokasi file kamu
input_folder = "/content/drive/MyDrive/MODIS_EVI_Monthly"                     # Folder citra LST bulanan
output_folder = "/content/drive/MyDrive/MODIS_EVI_Monthly/Interpolated"                    # Folder simpan hasil interpolasi
cropped_output_folder = "/content/drive/MyDrive/MODIS_EVI_Monthly/Cropped"      # Folder simpan hasil cropping
shapefile_path = "/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp"        # Shapefile batas wilayah administratif
os.makedirs(output_folder, exist_ok=True)

# ===================== AMBIL DATA =====================
tif_files = sorted(glob(os.path.join(input_folder, "*.tif")))

def get_month_str(filepath):
    basename = os.path.splitext(os.path.basename(filepath))[0]
    return basename.split("_")[-2] + "_" + basename.split("_")[-1]

# ===================== FUNGSI INTERPOLASI =====================
def interpolate_average_fill_only(idx):
    target_file = tif_files[idx]
    with rasterio.open(target_file) as src:
        target_data = src.read(1).astype(np.float32)
        meta = src.meta.copy()
        nodata = src.nodata
        if nodata is not None:
            target_data[target_data == nodata] = np.nan

    selected_files = tif_files[idx-3:idx] + tif_files[idx+1:idx+4]
    arrays = []
    for f in selected_files:
        with rasterio.open(f) as src:
            arr = src.read(1).astype(np.float32)
            nd = src.nodata
            if nd is not None:
                arr[arr == nd] = np.nan
            arrays.append(arr)

    stacked = np.stack(arrays)
    interpolated_values = np.nanmean(stacked, axis=0)

    mask_missing = np.isnan(target_data)
    target_data[mask_missing] = interpolated_values[mask_missing]

    meta.update(dtype=rasterio.float32, nodata=np.nan)

    return target_data, meta

# ===================== FUNGSI MASKING =====================
def mask_raster_with_shape(raster_path, output_path, shapes, nodata_val=np.nan):
    with rasterio.open(raster_path) as src:
        out_image, out_transform = mask(src, shapes, crop=True, nodata=nodata_val)
        out_meta = src.meta.copy()
    out_meta.update({
        "height": out_image.shape[1],
        "width": out_image.shape[2],
        "transform": out_transform,
        "nodata": nodata_val
    })
    with rasterio.open(output_path, "w", **out_meta) as dest:
        dest.write(out_image)

# ===================== FUNGSI VISUALISASI =====================
def visualize_three_panels(original_path, interpolated_path, masked_path, month_str):
    with rasterio.open(original_path) as src_orig:
        original = src_orig.read(1).astype(np.float32)
        nodata = src_orig.nodata
        if nodata is not None:
            original[original == nodata] = np.nan

    with rasterio.open(interpolated_path) as src_interp:
        interpolated = src_interp.read(1).astype(np.float32)

    with rasterio.open(masked_path) as src_masked:
        masked = src_masked.read(1).astype(np.float32)

    vmin = np.nanmin(interpolated)
    vmax = np.nanmax(interpolated)

    fig, axs = plt.subplots(1, 3, figsize=(18, 6))

    im0 = axs[0].imshow(original, cmap='inferno', vmin=vmin, vmax=vmax)
    axs[0].set_title("Citra Asli (Missing)")
    plt.colorbar(im0, ax=axs[0])

    im1 = axs[1].imshow(interpolated, cmap='inferno', vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Interpolasi")
    plt.colorbar(im1, ax=axs[1])

    im2 = axs[2].imshow(masked, cmap='inferno', vmin=vmin, vmax=vmax)
    axs[2].set_title("Setelah Masking")
    plt.colorbar(im2, ax=axs[2])

    plt.suptitle(f"Perbandingan Proses Bulan {month_str}")
    plt.tight_layout()
    plt.show()
    plt.close()

# ===================== LOAD SHAPEFILE =====================
gdf = gpd.read_file(shapefile_path)
geometry = gdf.geometry.values

# ===================== FOLDER TAMBAHAN =====================
cropped_output_folder = os.path.join(output_folder, "cropped")
visual_output_folder = os.path.join(output_folder, "visualization")
os.makedirs(cropped_output_folder, exist_ok=True)
os.makedirs(visual_output_folder, exist_ok=True)

# ===================== LOOP INTERPOLASI + MASKING + VISUAL =====================
for idx in range(3, len(tif_files) - 3):
    month = get_month_str(tif_files[idx])
    print(f"Processing bulan {month}...")

    # Interpolasi
    filled_array, meta = interpolate_average_fill_only(idx)
    interpolated_temp_path = os.path.join(output_folder, f"LST_INTERPOLATED_{month}.tif")
    with rasterio.open(interpolated_temp_path, "w", **meta) as dst:
        dst.write(filled_array, 1)

    # Masking
    final_output_path = os.path.join(cropped_output_folder, f"LST_JAKARTA_{month}.tif")
    mask_raster_with_shape(interpolated_temp_path, final_output_path, geometry)

    # Visualisasi
    visualize_three_panels(
        tif_files[idx],
        interpolated_temp_path,
        final_output_path,
        month
    )


print("‚úÖ Selesai: Semua bulan berhasil diproses.")

import geopandas as gpd
import matplotlib.pyplot as plt

# Baca grid polygon
grid = gpd.read_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/Grid Jakarta.shp")

# 2. Hitung centroid untuk setiap polygon
grid_centroid = grid.copy()
grid_centroid["geometry"] = grid_centroid.centroid

# 3. Tambahkan ID unik kalau belum ada
if "grid_id" not in grid_centroid.columns:
    grid_centroid["grid_id"] = ["G_{:04d}".format(i) for i in range(len(grid_centroid))]

# 4. Tampilkan hasil centroid
fig, ax = plt.subplots(figsize=(10, 10))
grid.boundary.plot(ax=ax, color="black", linewidth=0.5, label="Grid Boundary")  # Outline grid lama
grid_centroid.plot(ax=ax, color="red", markersize=10, label="Centroid Points")  # Titik centroid baru
plt.legend()
plt.title("Centroid dari Grid 1x1 km di DKI Jakarta")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.show()

# 5. (Optional) Simpan centroid ke shapefile baru
grid_centroid.to_file("grid_dki_centroid.shp")

#-------------------------
# CLIP DOWNSCALED
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask dengan nodata asli
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value  # GUNAKAN nodata asli
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI SEBELUM DAN SESUDAH CLIPPING ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(raster_data, cmap='viridis')
        ax[0].set_title(f"Asli: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[0], cmap='viridis')
        ax[1].set_title(f"Clipped: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"Processed and visualized: {filename}")

"""# GEE Version T2M"""

# Melakukan autentikasi dan mendefinisikan Google Cloud Project yang akan digunakan
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')
Map = geemap.Map()
Map
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")
#AOI= ee.FeatureCollection("projects/ee-sidangapril2024/assets/DKI_JAKARTA")
Map.addLayer(AOI, {}, "AOI")
Map.centerObject(AOI, 8)

# Rentang waktu
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    mean_temp_celsius = filtered_collection.select('temperature_2m') \
        .mean() \
        .subtract(273.15) \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return mean_temp_celsius

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 20,
    'max': 35,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, 'Mean Temperature (¬∞C)')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------
# PENYIMPANAN
#-------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_mean_t2m',
        folder='/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M',
    fileNamePrefix='ERA5_T2M_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,  # skala asli ERA5-Land
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()



#-------------------
# MELIHAT INFORMASI
#-------------------

import rasterio
from rasterio.plot import show
import os
import numpy as np
import ee # Import ee here

# Buka file multiband
file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/ERA5_T2M_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    print("‚úÖ Informasi Umum")
    print(f"- CRS: {src.crs}")
    print(f"- Resolusi (meter): {src.res}")
    print(f"- Ukuran raster: {src.width} x {src.height}")
    print(f"- Jumlah band: {src.count}")
    print(f"- Bounds: {src.bounds}")

    print("\nüì¶ Statistik per band:")
    for i in range(1, src.count + 1):
        band = src.read(i)
        band_name = f"Band {i}"  # Atau bisa pakai nama dari metadata jika tersedia
        print(f" {band_name}: min={np.nanmin(band):.2f}, max={np.nanmax(band):.2f}, mean={np.nanmean(band):.2f}")

    print("\nüìù Metadata tambahan (jika ada):")
    print(src.tags())

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 't2m'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=11132,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('v_component_of_wind_10m') \
        .mean() \
        .clip(AOI) \
        .rename('t2m') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())


#-------------------
# PLOT MISSING
#-------------------

import matplotlib.pyplot as plt

# Data bulan dan missing ratio (dari hasil kamu)
months = ['2022-01', '2022-02', '2022-03', '2022-04', '2022-05', '2022-06',
          '2022-07', '2022-08', '2022-09', '2022-10', '2022-11', '2022-12',
          '2023-01', '2023-02', '2023-03', '2023-04', '2023-05', '2023-06',
          '2023-07', '2023-08', '2023-09', '2023-10', '2023-11', '2023-12',
          '2024-01', '2024-02', '2024-03', '2024-04', '2024-05', '2024-06',
          '2024-07', '2024-08', '2024-09', '2024-10', '2024-11', '2024-12']

missing_ratio = [0.11010779941985649] * 36  # Sama semua
valid_ratio = [1 - r for r in missing_ratio]

# Membuat plot
plt.figure(figsize=(14, 6))
plt.plot(months, valid_ratio, marker='o', label='Valid Ratio', color='green')
plt.plot(months, missing_ratio, marker='x', label='Missing Ratio', color='red')

plt.title('Valid vs Missing Ratio per Bulan (2022-2024)', fontsize=16)
plt.xlabel('Bulan', fontsize=12)
plt.ylabel('Rasio', fontsize=12)
plt.xticks(rotation=45)
plt.grid(True)
plt.legend()
plt.tight_layout()
plt.show()

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm

# # ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

# -------------------------------
# MEMASTIKAN TIDAK ADA NaN
# -------------------------------

import numpy as np
import rasterio

# Buka raster hasil kriging
with rasterio.open('/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/NAN/ERA5_T2M_Monthly_2022_2024_NaN_Interpolated.tif') as src:
    data = src.read(1)

# Cek apakah masih ada NaN
ada_nan = np.isnan(data).any()

if ada_nan:
    print("Masih ada nilai NaN di dalam raster.")
else:
    print("Tidak ada nilai NaN, semua data sudah terisi.")

import rasterio

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/NAN/ERA5_T2M_Monthly_2022_2024_NaN_Interpolated.tif'

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan lebar dan tinggi dalam piksel
    width = src.width
    height = src.height

    print(f"Lebar raster: {width} piksel")
    print(f"Tinggi raster: {height} piksel")

#-------------------
# Downscaling
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    vmin = min(np.nanmin(before_array), np.nanmin(after_array))
    vmax = max(np.nanmax(before_array), np.nanmax(after_array))

    im1 = axs[0].imshow(before_array, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_array, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling (1000m)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik (resize array untuk perbandingan)
def evaluate_stats(before, after, filename):
    after_resized = resize(after, before.shape, order=1, preserve_range=True, anti_aliasing=False)

    mask = ~np.isnan(before) & ~np.isnan(after_resized)
    if np.count_nonzero(mask) == 0:
        print(f"‚ö†Ô∏è {filename} tidak dapat dievaluasi (semua NaN).")
        return None

    y_true = before[mask]
    y_pred = after_resized[mask]

    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)  # ‚¨ÖÔ∏è Perbaikan di sini
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)

    print(f"üìä Statistik Evaluasi: {filename}")
    print(f"- RMSE : {rmse:.4f}")
    print(f"- MSE  : {mse:.4f}")
    print(f"- MAE  : {mae:.4f}")
    print(f"- R¬≤   : {r2:.4f}")
    print()

    return {
        "Filename": filename,
        "RMSE": rmse,
        "MSE": mse,
        "MAE": mae,
        "R2": r2
    }

# Fungsi resampling raster ke resolusi 1000m
def resample_raster_to_1km(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        src_array = src.read(1)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs, src.width, src.height, *src_bounds, resolution=1000
        )

        kwargs = src.meta.copy()
        kwargs.update({
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height
        })

        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((height, width), dtype=src.dtypes[0])
            reproject(
                source=src_array,
                destination=dst_array,
                src_transform=src_transform,
                src_crs=src_crs,
                dst_transform=dst_transform,
                dst_crs=src_crs,
                resampling=Resampling.bilinear
            )
            dst.write(dst_array, 1)

    print(f"‚úÖ {os.path.basename(input_path)} berhasil di-resample ke 1000m")

    if visualize:
        visualize_comparison(src_array, dst_array, os.path.basename(input_path))

    return src_array, dst_array

# === Batch Processing ===
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/NAN"  # Ganti dengan folder raster input kamu
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/DOWNSCALED"  # Folder hasil
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_resampled.tif")

    before, after = resample_raster_to_1km(raster_file, output_path, visualize=True)
    stats = evaluate_stats(before, after, filename)
    if stats:
        results.append(stats)

# Simpan hasil evaluasi ke CSV
df = pd.DataFrame(results)
csv_path = os.path.join(output_folder, "resampling_evaluation.csv")
df.to_csv(csv_path, index=False)
print(f"üìÅ Statistik evaluasi disimpan ke: {csv_path}")

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

# -------------
# STEP 2: Resample hasil ke ukuran asli (untuk evaluasi)
# -------------

# Upsampling to original size
src_shape = src_data.shape
upsampled = np.empty((downscaled_ds.count, src_shape[0], src_shape[1]), dtype=src_data.dtype)  # Changed to downscaled_ds.count to match the number of bands

with rasterio.open(dst_path) as downscaled_ds:  # Open downscaled dataset
    for i in range(1, downscaled_ds.count + 1):
        rasterio.warp.reproject(
            source=rasterio.band(downscaled_ds, i),
            destination=upsampled[i - 1],
            src_transform=new_transform,
            src_crs=src_crs,
            dst_transform=src_transform,  # Use original transform
            dst_crs=src_crs,
            resampling=Resampling.nearest
        )

# -------------
# STEP 3: Evaluasi Statistik
# -------------

# Asumsikan band pertama untuk evaluasi
original = src_data.flatten()
predicted = upsampled[0].flatten()

# Mask NaN
mask = ~np.isnan(original) & ~np.isnan(predicted)
original_valid = original[mask]
predicted_valid = predicted[mask]

rmse = np.sqrt(mean_squared_error(original_valid, predicted_valid))
mae = mean_absolute_error(original_valid, predicted_valid)
r2 = r2_score(original_valid, predicted_valid)
std_dev = np.std(predicted_valid)

print("\nüìä Evaluasi:")
print(f"RMSE       : {rmse:.4f}")
print(f"MAE        : {mae:.4f}")
print(f"R¬≤ Score   : {r2:.4f}")
print(f"Std Dev    : {std_dev:.4f}")

# -------------
# STEP 4: Visualisasi Band Pertama
# -------------

plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.imshow(src_data, cmap='coolwarm')
plt.title('Original (11km)')
plt.colorbar(label='T2M (¬∞C)')

plt.subplot(1, 2, 2)
plt.imshow(upsampled[0], cmap='coolwarm')
plt.title('Resampled from Downscaled (1km)')
plt.colorbar(label='T2M (¬∞C)')

plt.suptitle('Visualisasi Band Pertama')
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Assuming the following variables are available:
# src_data: original data
# upsampled[0]: resampled data

# Define the extent of the image for both datasets
extent = [src_transform[2], src_transform[2] + src_data.shape[1] * src_transform[0],
          src_transform[5] + src_data.shape[0] * src_transform[4], src_transform[5]]

# Display both images for visual comparison
fig, axes = plt.subplots(1, 2, figsize=(12, 6))

# Plot the original data
axes[0].imshow(src_data, cmap='coolwarm', extent=extent)
axes[0].set_title('Original')

# Plot the resampled data
axes[0].imshow(upsampled[0], cmap='coolwarm', extent=extent)
axes[1].set_title('Resampled from Downscaled')

plt.tight_layout()
plt.show()

# Check for NaN values in upsampled data
print("NaN values in upsampled data:", np.isnan(upsampled).any())

#-----------------------------------
# CEK EPSG, DIMENSI RASTER, RESOLUSI
#-----------------------------------

# 1. DATA ORIGINAL-----------------------------------------------------------------------------------
import rasterio

with rasterio.open('/content/drive/MyDrive/T2M_EXPORT/ERA5_T2M_Monthly_2022_2024.tif') as src:
    crs = src.crs  # Mendapatkan sistem koordinat (CRS)
    print(crs)

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/T2M_EXPORT/ERA5_T2M_Monthly_2022_2024.tif'  # Ganti dengan path file TIFF kamu
with rasterio.open(tif_path) as src:
    src_data = src.read(1)  # Baca band pertama
    src_shape = src_data.shape

    print("Dimensi Data Raster (src_shape):", src_shape)

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan resolusi spasial (skala)
    resolution_x = src.res[0]  # Resolusi dalam arah x (horizontal)
    resolution_y = src.res[1]  # Resolusi dalam arah y (vertikal)

    print(f"Resolusi X (lebar piksel): {resolution_x}")
    print(f"Resolusi Y (tinggi piksel): {resolution_y}")

# 2. DATA DOWNSCALED----------------------------------------------------------------------------------
import rasterio
with rasterio.open('/content/drive/MyDrive/T2M_EXPORT/T2M_Reprojected_UTM.tif') as src:
    crs = src.crs  # Mendapatkan sistem koordinat (CRS)
    print(crs)

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/T2M_EXPORT/ERA5_T2M_Downscaled_1000m.tif'  # Ganti dengan path file TIFF kamu
with rasterio.open(tif_path) as src:
    src_data = src.read(1)  # Baca band pertama
    src_shape = src_data.shape

    print("Dimensi Data Raster (src_shape):", src_shape)

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan resolusi spasial (skala)
    resolution_x = src.res[0]  # Resolusi dalam arah x (horizontal)
    resolution_y = src.res[1]  # Resolusi dalam arah y (vertikal)

    print(f"Resolusi X (lebar piksel): {resolution_x}")
    print(f"Resolusi Y (tinggi piksel): {resolution_y}")

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

#-------------------------
# CLIP DATA ASLI
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask dengan nodata asli
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value  # GUNAKAN nodata asli
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI SEBELUM DAN SESUDAH CLIPPING ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(raster_data, cmap='viridis')
        ax[0].set_title(f"Asli: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[0], cmap='viridis')
        ax[1].set_title(f"Clipped: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"Processed and visualized: {filename}")

#-------------------------
# INFORMASI NAN PASCA CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/T2M_EXPORT/T2M_1km_DownscaledCLIP/Jakarta_ERA5_T2M_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

# 6. (Opsional) Simpan ke CSV
summary_df.to_csv('/content/drive/MyDrive/T2M_EXPORT/T2M_1km_DownscaledCLIP/valid_missing_summaryclip.csv', index=False)

import geopandas as gpd
import rioxarray
import pandas as pd

# 1. Load shapefile centroid
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/grid_dki_centroid.shp'  # path ke shapefile kamu
centroids = gpd.read_file(shapefile_path)

# 2. Load stacked raster
stacked_raster = rioxarray.open_rasterio('/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/T2M_1km_DownscaledCLIP/Jakarta_ERA5_T2M_Monthly_2022_2024_NaN_resampled.tif')

# 3. Samakan CRS
if centroids.crs != stacked_raster.rio.crs:
    centroids = centroids.to_crs(stacked_raster.rio.crs)

# 4. Ekstraksi nilai NO2 untuk tiap Grid_ID
results = []

# List tanggal atau bulan sesuai jumlah band (36 band)
waktu_list = pd.date_range(start='2022-01-01', periods=stacked_raster.sizes['band'], freq='MS').strftime('%Y-%m').tolist()

for idx, row in centroids.iterrows():
    x, y = row.geometry.x, row.geometry.y
    sampled = stacked_raster.sel(x=x, y=y, method="nearest")
    values = sampled.values  # array berisi nilai semua band

    for i, value in enumerate(values):
        results.append({
            'Grid_ID': row['grid_id'],     # ganti dengan kolom ID di shapefile kamu
            'Lat': y,
            'Lon': x,
            'Waktu': waktu_list[i],
            't2m': value
        })

# 5. Buat DataFrame
df = pd.DataFrame(results)


import pandas as pd

# Set agar semua baris tampil
pd.set_option('display.max_rows', None)

# Print semua hasil
print(df)

# 6. Simpan ke CSV
df.to_excel('/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/T2M_EXPORT/T2M_1km_DownscaledCLIP/T2M_Values.xlsx', index=False)

print("Ekstraksi selesai dan file disimpan dengan header Grid_ID, Lat, Lon, Waktu, T2M.")

"""# GEE Version 10M V Wind"""

# Melakukan autentikasi dan mendefinisikan Google Cloud Project yang akan digunakan
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')
Map = geemap.Map()
Map
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")
#AOI= ee.FeatureCollection("projects/ee-sidangapril2024/assets/DKI_JAKARTA")
Map.addLayer(AOI, {}, "AOI")
Map.centerObject(AOI, 8)

# Rentang waktu
time_start = '2022-01-01'
time_end = '2024-12-31'

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    v_component_wind = filtered_collection.select('v_component_of_wind_10m') \
        .mean() \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return v_component_wind

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 20,
    'max': 35,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, '10m v component of wind')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------
# PENYIMPANAN
#-------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_10m_v_wind',
        folder='10v_EXPORT',
    fileNamePrefix='ERA5_10v_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,  # skala asli ERA5-Land
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------
# MELIHAT INFORMASI
#-------------------

import rasterio
from rasterio.plot import show
import os
import numpy as np

# Buka file multiband
file_path = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    print("‚úÖ Informasi Umum")
    print(f"- CRS: {src.crs}")
    print(f"- Resolusi (meter): {src.res}")
    print(f"- Ukuran raster: {src.width} x {src.height}")
    print(f"- Jumlah band: {src.count}")
    print(f"- Bounds: {src.bounds}")

    print("\nüì¶ Statistik per band:")
    for i in range(1, src.count + 1):
        band = src.read(i)
        band_name = f"Band {i}"  # Atau bisa pakai nama dari metadata jika tersedia
        print(f" {band_name}: min={np.nanmin(band):.2f}, max={np.nanmax(band):.2f}, mean={np.nanmean(band):.2f}")

    print("\nüìù Metadata tambahan (jika ada):")
    print(src.tags())

#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/10v_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='Temperature (¬∞C)')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'v10'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=1000,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('v_component_of_wind_10m') \
        .mean() \
        .clip(AOI) \
        .rename('v10') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm


# # ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/ERA5_10v_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='10v')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

# -------------------------------
# MEMASTIKAN TIDAK ADA NaN
# -------------------------------

import numpy as np
import rasterio

# Buka raster hasil kriging
with rasterio.open('/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/ERA5_10v_Monthly_2022_2024_NaN_Interpolated.tif') as src:
    data = src.read(1)

# Cek apakah masih ada NaN
ada_nan = np.isnan(data).any()

if ada_nan:
    print("Masih ada nilai NaN di dalam raster.")
else:
    print("Tidak ada nilai NaN, semua data sudah terisi.")

import rasterio

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/ERA5_10v_Monthly_2022_2024_NaN_Interpolated.tif'

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan lebar dan tinggi dalam piksel
    width = src.width
    height = src.height

    print(f"Lebar raster: {width} piksel")
    print(f"Tinggi raster: {height} piksel")

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10v_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM'
output_folder = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask dengan nodata asli
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value  # GUNAKAN nodata asli
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI SEBELUM DAN SESUDAH CLIPPING ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(raster_data, cmap='viridis')
        ax[0].set_title(f"Asli: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[0], cmap='viridis')
        ax[1].set_title(f"Clipped: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"Processed and visualized: {filename}")

#-------------------------
# INFORMASI NAN PASCA CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP/Jakarta_ERA5_10v_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

# 6. (Opsional) Simpan ke CSV
summary_df.to_csv('/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP/valid_missing_summaryclip.csv', index=False)

#-------------------------
# EXTRACT VALUE
#-------------------------

import geopandas as gpd
import matplotlib.pyplot as plt

# Baca grid polygon
grid = gpd.read_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/Grid Jakarta.shp")

# 2. Hitung centroid untuk setiap polygon
grid_centroid = grid.copy()
grid_centroid["geometry"] = grid_centroid.centroid

# 3. Tambahkan ID unik kalau belum ada
if "grid_id" not in grid_centroid.columns:
    grid_centroid["grid_id"] = ["G_{:04d}".format(i) for i in range(len(grid_centroid))]

# 4. Tampilkan hasil centroid
fig, ax = plt.subplots(figsize=(10, 10))
grid.boundary.plot(ax=ax, color="black", linewidth=0.5, label="Grid Boundary")  # Outline grid lama
grid_centroid.plot(ax=ax, color="red", markersize=10, label="Centroid Points")  # Titik centroid baru
plt.legend()
plt.title("Centroid dari Grid 1x1 km di DKI Jakarta")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.show()

# 5. (Optional) Simpan centroid ke shapefile baru
grid_centroid.to_file("grid_dki_centroid.shp")


import geopandas as gpd
import rioxarray
import pandas as pd
import gspread_dataframe as gd
import gspread
from google.colab import auth
from google.auth import default

# --- AUTENTIKASI GOOGLE DRIVE / SHEETS ---
auth.authenticate_user()
creds, _ = default()
gc = gspread.authorize(creds)

# --- 1. SETTING PATH ---
input_raster = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP/Jakarta_ERA5_10v_Monthly_2022_2024_NaN_resampled.tif'  # <- ganti path file raster stack
centroid_shapefile = '/content/grid_dki_centroid.shp'  # <- path shapefile centroid

# --- 2. BACA DATA ---
raster = rioxarray.open_rasterio(input_raster)
centroids = gpd.read_file(centroid_shapefile)

# --- 3. EKSTRAKSI PIXEL ---
extracted_data = []

# Cek dimensi raster
n_bands = raster.rio.count

# Loop untuk setiap centroid
for idx, row in centroids.iterrows():
    centroid = row.geometry.centroid
    x, y = centroid.x, centroid.y

    # Ekstrak semua band (karena 1 file stacked)
    values = raster.sel(x=x, y=y, method="nearest").values

    for band_idx in range(n_bands):
        extracted_data.append({
            'Grid_ID': row['grid_id'],  # Sesuaikan nama kolom ID
            'Band': band_idx + 1,        # Band dimulai dari 1
            'Value': values[band_idx]
        })

# Konversi ke DataFrame
df = pd.DataFrame(extracted_data)

# --- 4. UPLOAD KE GOOGLE SHEETS ---
# Nama file Google Sheets
sheet_name = 'Ekstraksi_10v'
sh = gc.create(sheet_name)

# Upload DataFrame
worksheet = sh.get_worksheet(0)
gd.set_with_dataframe(worksheet, df)

print(f"Hasil ekstraksi sudah diupload ke Google Sheets: {sheet_name}")

import geopandas as gpd
import rasterio
from rasterio.sample import sample_gen
import pandas as pd
import matplotlib.pyplot as plt

# 1. Baca grid polygon
grid = gpd.read_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/Grid Jakarta.shp")

# 2. Hitung centroid untuk setiap polygon
grid_centroid = grid.copy()
grid_centroid["geometry"] = grid_centroid.centroid

# 3. Tambahkan ID unik kalau belum ada
if "grid_id" not in grid_centroid.columns:
    grid_centroid["grid_id"] = ["G_{:04d}".format(i) for i in range(len(grid_centroid))]

# 4. Visualisasi centroid
fig, ax = plt.subplots(figsize=(10, 10))
grid.boundary.plot(ax=ax, color="black", linewidth=0.5, label="Grid Boundary")
grid_centroid.plot(ax=ax, color="red", markersize=10, label="Centroid Points")
plt.legend()
plt.title("Centroid dari Grid 1x1 km di DKI Jakarta")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.show()

# 5. Simpan centroid ke shapefile (opsional)
grid_centroid.to_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/grid_dki_centroid.shp")

# -------------
# 6. Ekstraksi nilai raster dari V-component of Wind
# -------------

# Buka file raster
raster_path = '/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP/Jakarta_ERA5_10v_Monthly_2022_2024_NaN_resampled.tif'  # Ganti dengan path raster kamu
raster = rasterio.open(raster_path)

# Pastikan CRS raster sama dengan grid
if raster.crs != grid_centroid.crs:
    grid_centroid = grid_centroid.to_crs(raster.crs)

# Ekstrak nilai di titik centroid
coords = [(geom.x, geom.y) for geom in grid_centroid.geometry]
values = list(raster.sample(coords))

# Karena values bisa multi-band, ambil band pertama
extracted_values = [val[0] if val.size > 0 else None for val in values]
# 7. Masukkan nilai ke DataFrame
result_df = pd.DataFrame({
    "grid_id": grid_centroid["grid_id"],
    "longitude": [point.x for point in grid_centroid.geometry],
    "latitude": [point.y for point in grid_centroid.geometry],
    "v_component_10m": extracted_values
})

# 8. Simpan ke CSV (bisa dibuka di Google Sheets)
output_csv = "/content/drive/MyDrive/10v_EXPORT/ERA5_10v_Monthly_2022_2024_1KM_CLIP/Jakarta_10v_value.tif.csv"
result_df.to_csv(output_csv, index=False)

print(f"‚úÖ Ekstraksi selesai! Hasil disimpan di {output_csv}")

"""# GEE Version 10M U Wind"""

# Melakukan autentikasi dan mendefinisikan Google Cloud Project yang akan digunakan
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')
Map = geemap.Map()
Map
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")
#AOI= ee.FeatureCollection("projects/ee-sidangapril2024/assets/DKI_JAKARTA")
Map.addLayer(AOI, {}, "AOI")
Map.centerObject(AOI, 8)

# Rentang waktu
time_start = '2022-01-01'
time_end = '2024-12-31'

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    u_component_wind = filtered_collection.select('u_component_of_wind_10m') \
        .mean() \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return u_component_wind

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 20,
    'max': 35,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, '10m u component of wind')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------
# PENYIMPANAN
#-------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_10m_u_wind',
        folder='10u_EXPORT',
    fileNamePrefix='ERA5_10u_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,  # skala asli ERA5-Land
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------
# MELIHAT INFORMASI
#-------------------

import rasterio
from rasterio.plot import show
import os
import numpy as np

# Buka file multiband
file_path = '/content/drive/MyDrive/10u_EXPORT/ERA5_10u_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    print("‚úÖ Informasi Umum")
    print(f"- CRS: {src.crs}")
    print(f"- Resolusi (meter): {src.res}")
    print(f"- Ukuran raster: {src.width} x {src.height}")
    print(f"- Jumlah band: {src.count}")
    print(f"- Bounds: {src.bounds}")

    print("\nüì¶ Statistik per band:")
    for i in range(1, src.count + 1):
        band = src.read(i)
        band_name = f"Band {i}"  # Atau bisa pakai nama dari metadata jika tersedia
        print(f" {band_name}: min={np.nanmin(band):.2f}, max={np.nanmax(band):.2f}, mean={np.nanmean(band):.2f}")

    print("\nüìù Metadata tambahan (jika ada):")
    print(src.tags())

#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/10u_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='10u')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'u10'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=1000,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('u_component_of_wind_10m') \
        .mean() \
        .clip(AOI) \
        .rename('u10') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm

# ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/ERA5_10u_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

# -------------------------------
# MEMASTIKAN TIDAK ADA NaN
# -------------------------------

import numpy as np
import rasterio

# Buka raster hasil kriging
with rasterio.open('/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/NAN/ERA5_10v_Monthly_2022_2024_NaN_Interpolated.tif') as src:
    data = src.read(1)

# Cek apakah masih ada NaN
ada_nan = np.isnan(data).any()

if ada_nan:
    print("Masih ada nilai NaN di dalam raster.")
else:
    print("Tidak ada nilai NaN, semua data sudah terisi.")

import rasterio

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/NAN/ERA5_10v_Monthly_2022_2024_NaN_Interpolated.tif'

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan lebar dan tinggi dalam piksel
    width = src.width
    height = src.height

    print(f"Lebar raster: {width} piksel")
    print(f"Tinggi raster: {height} piksel")

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/10u_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='10u ')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-------------------------------
# INFORMASI NAN Pasca Downscale
#------------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/10u_EXPORT/ERA5_10u_Monthly_2022_2024_1KM/ERA5_10u_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

# 6. (Opsional) Simpan ke CSV
summary_df.to_csv('/content/drive/MyDrive/10u_EXPORT/valid_missing_summarydw.csv', index=False)

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/10u_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/10u_EXPORT/ERA5_10u_Monthly_2022_2024_1KM'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/10u_EXPORT/10u_monthly_clip'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read(1)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask dengan nodata asli
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value  # GUNAKAN nodata asli
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI SEBELUM DAN SESUDAH CLIPPING ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(raster_data, cmap='viridis')
        ax[0].set_title(f"Asli: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[0], cmap='viridis')
        ax[1].set_title(f"Clipped: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"Processed and visualized: {filename}")

#-------------------------
# INFORMASI NAN PASCA CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/10u_EXPORT/10u_monthly_clip/Jakarta_ERA5_10u_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

# 6. (Opsional) Simpan ke CSV
summary_df.to_csv('/content/drive/MyDrive/10u_EXPORT/10u_monthly_clip/valid_missing_summaryclip.csv', index=False)

#-------------------------
# EKSTRAK NILAI
#-------------------------

import geopandas as gpd
import rasterio
from rasterio.sample import sample_gen
import pandas as pd
import matplotlib.pyplot as plt

# 1. Baca grid polygon
grid = gpd.read_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/Grid Jakarta.shp")

# 2. Hitung centroid untuk setiap polygon
grid_centroid = grid.copy()
grid_centroid["geometry"] = grid_centroid.centroid

# 3. Tambahkan ID unik kalau belum ada
if "grid_id" not in grid_centroid.columns:
    grid_centroid["grid_id"] = ["G_{:04d}".format(i) for i in range(len(grid_centroid))]

# 4. Visualisasi centroid
fig, ax = plt.subplots(figsize=(10, 10))
grid.boundary.plot(ax=ax, color="black", linewidth=0.5, label="Grid Boundary")
grid_centroid.plot(ax=ax, color="red", markersize=10, label="Centroid Points")
plt.legend()
plt.title("Centroid dari Grid 1x1 km di DKI Jakarta")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.show()

# 5. Simpan centroid ke shapefile (opsional)
grid_centroid.to_file("/content/drive/MyDrive/PENGOLAHAN/Grid Jakarta/grid_dki_centroid.shp")

# -------------
# 6. Ekstraksi nilai raster dari V-component of Wind
# -------------

# Buka file raster
raster_path = '/content/drive/MyDrive/10u_EXPORT/10u_monthly_clip/Jakarta_ERA5_10u_Monthly_2022_2024_NaN_resampledclip.tif'  # Ganti dengan path raster kamu
raster = rasterio.open(raster_path)

# Pastikan CRS raster sama dengan grid
if raster.crs != grid_centroid.crs:
    grid_centroid = grid_centroid.to_crs(raster.crs)

# Ekstrak nilai di titik centroid
coords = [(geom.x, geom.y) for geom in grid_centroid.geometry]
values = list(raster.sample(coords))

# Karena values bisa multi-band, ambil band pertama
extracted_values = [val[0] if val.size > 0 else None for val in values]
# 7. Masukkan nilai ke DataFrame
result_df = pd.DataFrame({
    "grid_id": grid_centroid["grid_id"],
    "longitude": [point.x for point in grid_centroid.geometry],
    "latitude": [point.y for point in grid_centroid.geometry],
    "u_component_10m": extracted_values
})

# 8. Simpan ke CSV (bisa dibuka di Google Sheets)
output_csv = "/content/drive/MyDrive/10u_EXPORT/10u_monthly_clip/Jakarta_ERA5_U10_Monthly_2022_2024_Values.csv"
result_df.to_csv(output_csv, index=False)

print(f"‚úÖ Ekstraksi selesai! Hasil disimpan di {output_csv}")

"""# GEE Version Total Precipitation"""



# Buat ImageCollection bulanan
multi_band_image = monthly_collection.toBands()


# -------------------
# PENYIMPANAN
# -------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_tp',
    folder='TP_EXPORT',
    fileNamePrefix='ERA5_tp_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------
# MELIHAT INFORMASI
#-------------------

import rasterio
from rasterio.plot import show
import os
import numpy as np

# Buka file multiband
file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/ERA5_TP_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    print("‚úÖ Informasi Umum")
    print(f"- CRS: {src.crs}")
    print(f"- Resolusi (meter): {src.res}")
    print(f"- Ukuran raster: {src.width} x {src.height}")
    print(f"- Jumlah band: {src.count}")
    print(f"- Bounds: {src.bounds}")

    print("\nüì¶ Statistik per band:")
    for i in range(1, src.count + 1):
        band = src.read(i)
        band_name = f"Band {i}"  # Atau bisa pakai nama dari metadata jika tersedia
        print(f" {band_name}: min={np.nanmin(band):.2f}, max={np.nanmax(band):.2f}, mean={np.nanmean(band):.2f}")

    print("\nüìù Metadata tambahan (jika ada):")
    print(src.tags())


#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='10u')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'tp'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=11132,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('total_precipitation') \
        .mean() \
        .clip(AOI) \
        .rename('tp') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm

# ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/ERA5_TP_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

#-------------------------
# INFORMASI NAN Interpolate
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/TP_EXPORT/ERA5_tp_Monthly_2022_2024_NaN.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

# 6. (Opsional) Simpan ke CSV
summary_df.to_csv('/content/drive/MyDrive/TP_EXPORT/valid_missing_summary.csv', index=False)

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#-------------------------
# INFORMASI NAN 1KM
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/TP_EXPORT/ERA5_tp_Monthly_2022_2024_1KM/ERA5_tp_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

#-------------------------
# INFORMASI NAN CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/TP_EXPORT/CLIP/Jakarta_ERA5_tp_Monthly_2022_2024_NaN_Interpolated_1km.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

"""# GEE Version Total Evaporation"""

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    total_evaporation = filtered_collection.select('total_evaporation') \
        .mean() \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return total_evaporation

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 20,
    'max': 35,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, 'total evaporation')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------
# PENYIMPANAN
#-------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_evaporation',
        folder='E_EXPORT',
    fileNamePrefix='ERA5_e_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,  # skala asli ERA5-Land
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------
# MELIHAT INFORMASI
#-------------------

import rasterio
from rasterio.plot import show
import os
import numpy as np

# Buka file multiband
file_path = '/content/drive/MyDrive/E_EXPORT/ERA5_e_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    print("‚úÖ Informasi Umum")
    print(f"- CRS: {src.crs}")
    print(f"- Resolusi (meter): {src.res}")
    print(f"- Ukuran raster: {src.width} x {src.height}")
    print(f"- Jumlah band: {src.count}")
    print(f"- Bounds: {src.bounds}")

    print("\nüì¶ Statistik per band:")
    for i in range(1, src.count + 1):
        band = src.read(i)
        band_name = f"Band {i}"  # Atau bisa pakai nama dari metadata jika tersedia
        print(f" {band_name}: min={np.nanmin(band):.2f}, max={np.nanmax(band):.2f}, mean={np.nanmean(band):.2f}")

    print("\nüìù Metadata tambahan (jika ada):")
    print(src.tags())


#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/E_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='10u')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-----------------------------------
# CEK EPSG, DIMENSI RASTER, RESOLUSI
#-----------------------------------

# 1. DATA ORIGINAL-----------------------------------------------------------------------------------
import rasterio

with rasterio.open('/content/drive/MyDrive/E_EXPORT/ERA5_e_Monthly_2022_2024.tif') as src:
    crs = src.crs  # Mendapatkan sistem koordinat (CRS)
    print(crs)

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/E_EXPORT/ERA5_e_Monthly_2022_2024.tif'  # Ganti dengan path file TIFF kamu
with rasterio.open(tif_path) as src:
    src_data = src.read(1)  # Baca band pertama
    src_shape = src_data.shape

    print("Dimensi Data Raster (src_shape):", src_shape)

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan resolusi spasial (skala)
    resolution_x = src.res[0]  # Resolusi dalam arah x (horizontal)
    resolution_y = src.res[1]  # Resolusi dalam arah y (vertikal)

    print(f"Resolusi X (lebar piksel): {resolution_x}")
    print(f"Resolusi Y (tinggi piksel): {resolution_y}")

# 2. DATA DOWNSCALED----------------------------------------------------------------------------------
import rasterio
with rasterio.open('/content/drive/MyDrive/T2M_EXPORT/T2M_Reprojected_UTM.tif') as src:
    crs = src.crs  # Mendapatkan sistem koordinat (CRS)
    print(crs)

# Path ke file TIFF
tif_path = '/content/drive/MyDrive/T2M_EXPORT/ERA5_T2M_Downscaled_1000m.tif'  # Ganti dengan path file TIFF kamu
with rasterio.open(tif_path) as src:
    src_data = src.read(1)  # Baca band pertama
    src_shape = src_data.shape

    print("Dimensi Data Raster (src_shape):", src_shape)

# Buka file TIFF
with rasterio.open(tif_path) as src:
    # Dapatkan resolusi spasial (skala)
    resolution_x = src.res[0]  # Resolusi dalam arah x (horizontal)
    resolution_y = src.res[1]  # Resolusi dalam arah y (vertikal)

    print(f"Resolusi X (lebar piksel): {resolution_x}")
    print(f"Resolusi Y (tinggi piksel): {resolution_y}")

#----------------------
# MELIHAT VISUALISASI
#----------------------

import os
import glob
import rasterio
import matplotlib.pyplot as plt

# Path folder hasil ekspor
folder_path = '/content/drive/MyDrive/E_EXPORT'  # Ganti dengan folder lokal kamu

# Cari semua file .tif di folder
tif_files = sorted(glob.glob(os.path.join(folder_path, '*.tif')))

print(f"Jumlah file ditemukan: {len(tif_files)}")

# Loop dan tampilkan
for tif_file in tif_files:
    with rasterio.open(tif_file) as src:
        image = src.read(1)  # baca band 1
        profile = src.profile

    plt.figure(figsize=(8, 6))
    plt.imshow(image, cmap='jet', vmin=20, vmax=35)  # vmin & vmax bisa disesuaikan
    plt.colorbar(label='10u')
    plt.title(os.path.basename(tif_file).replace('.tif', ''))
    plt.axis('off')
    plt.show()

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'e'  # Ganti dengan nama band yang sesuai, 'e' untuk total evaporation

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=11132,  # Skala asli ERA5-Land (sekitar 11131 meter) #perubahan disini
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('total_evaporation') \
        .mean() \
        .clip(AOI) \
        .rename('e') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm


# ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/E_EXPORT/ERA5_e_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/E_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/E_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#-------------------------
# INFORMASI NAN 1KM
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/E_EXPORT/ERA5_e_Monthly_2022_2024_1KM/ERA5_e_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/E_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/E_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

#-------------------------
# INFORMASI NAN clip
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/E_EXPORT/e_monthly_clip/Jakarta_ERA5_e_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

"""# GEE Version Surface Pressure"""

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2024-12-31')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    surface_pressure = filtered_collection.select('surface_pressure') \
        .mean() \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return surface_pressure

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 95000,  # minimum surface pressure dalam Pa
    'max': 105000,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, 'surface Pressure (Pa)')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------
# PENYIMPANAN
#-------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_surface_pressure',
    folder='SP_EXPORT',
    fileNamePrefix='ERA5_SP_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,  # Resolusi native ERA5
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------------
# INFORMASI NAN Awal
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SP_EXPORT/ERA5_SP_Monthly_2022_2024.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'sp'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=11132,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('surface_pressure') \
        .mean() \
        .clip(AOI) \
        .rename('sp') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

import numpy as np
import rasterio
from rasterio.plot import show
from pykrige.ok import OrdinaryKriging
from tqdm import tqdm


# ----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SP_EXPORT/ERA5_SP_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

#-------------------------
# INFORMASI NAN Interpolate
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SP_EXPORT/ERA5_SP_Monthly_2022_2024_NaN.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SP_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SP_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#-------------------------
# INFORMASI NAN Downscale
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SP_EXPORT/ERA5_SP_Monthly_2022_2024_1KM/ERA5_SP_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SP_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SP_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

#-------------------------
# INFORMASI NAN CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SP_EXPORT/sp_monthly_clip/Jakarta_ERA5_SP_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

"""# GEE Version Surface Net Solar Radiation"""

#-------------------
# PENGUNDUHAN
#-------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024 (sesuaikan jika perlu)
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2025-01-01')

# Buat list bulan
months = ee.List.sequence(0, end_date.difference(start_date, 'month'))

# Fungsi untuk menghitung rata-rata bulanan
def calculate_monthly_mean(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    year_month = start.format('YYYY-MM')
    filtered_collection = era5_collection.filterDate(start, end)
    surface_net_solar_radiation = filtered_collection.select('surface_net_solar_radiation') \
        .mean() \
        .clip(AOI) \
        .rename([year_month]) \
        .set('system:time_start', start.millis())
    return surface_net_solar_radiation

# Hitung rata-rata bulanan untuk setiap bulan
monthly_means = months.map(calculate_monthly_mean)
multi_band_image = ee.ImageCollection(monthly_means).toBands()

# Gabungkan menjadi ImageCollection
monthly_collection = ee.ImageCollection(monthly_means)

# Visualisasi (contoh untuk bulan pertama)
first_month_mean = monthly_collection.first()
vis_params = {
    'min': 95000,  # minimum surface pressure dalam Pa
    'max': 105000,
    'palette': ['blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month_mean, vis_params, 'surface net solar radiation')
Map.addLayer(AOI, {}, 'AOI')
Map

#-------------------------
# PENGUNDUHAN (AKUMULASI)
#-------------------------

import ee
import geemap

# Inisialisasi Earth Engine
ee.Authenticate()
ee.Initialize(project='ee-sidangapril2024')

# Definisikan Area of Interest (AOI)
AOI = ee.FeatureCollection("projects/ee-sidangapril2024/assets/JABODETABEK")

# Koleksi ERA5-Land hourly
era5_collection = ee.ImageCollection('ECMWF/ERA5_LAND/HOURLY')

# Rentang waktu: Januari 2022 - Desember 2024
start_date = ee.Date('2022-01-01')
end_date = ee.Date('2025-01-01')

# === 1. Fungsi untuk akumulasi harian ===
def daily_accumulation(day_offset):
    date = start_date.advance(day_offset, 'day')
    next_date = date.advance(1, 'day')
    daily_sum = era5_collection.filterDate(date, next_date) \
        .select('surface_net_solar_radiation') \
        .sum() \
        .clip(AOI) \
        .set('system:time_start', date.millis()) \
        .set('date_str', date.format('YYYY-MM-dd'))
    return daily_sum

# === 2. Buat koleksi data harian ===
n_days = end_date.difference(start_date, 'day')
day_indices = ee.List.sequence(0, n_days.subtract(1))
daily_collection = ee.ImageCollection(day_indices.map(daily_accumulation))

# === 3. Fungsi untuk akumulasi bulanan dari data harian ===
def monthly_from_daily(month_offset):
    month_start = start_date.advance(month_offset, 'month')
    month_end = month_start.advance(1, 'month')
    label = month_start.format('YYYY-MM')
    monthly_sum = daily_collection.filterDate(month_start, month_end) \
        .sum() \
        .clip(AOI) \
        .rename([label]) \
        .set('system:time_start', month_start.millis())
    return monthly_sum

# === 4. Buat koleksi bulanan dari hasil akumulasi harian ===
n_months = end_date.difference(start_date, 'month')
month_indices = ee.List.sequence(0, n_months.subtract(1))
monthly_collection = ee.ImageCollection(month_indices.map(monthly_from_daily))

# === 5. Visualisasi contoh (bulan pertama)
first_month = monthly_collection.first()
vis_params = {
    'min': 0.0,
    'max': 0.5,  # sesuaikan sesuai sebaran nilainya
    'palette': ['white', 'blue', 'green', 'yellow', 'red']
}

Map = geemap.Map()
Map.centerObject(AOI, 8)
Map.addLayer(first_month, vis_params, 'Monthly SSR')
Map.addLayer(AOI, {}, 'AOI')
Map

# Buat ImageCollection bulanan
multi_band_image = monthly_collection.toBands()


# -------------------
# PENYIMPANAN
# -------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_ssr',
    folder='ssr_EXPORT',
    fileNamePrefix='ERA5_ssr_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

# Buat ImageCollection bulanan
multi_band_image = monthly_collection.toBands()


# -------------------
# PENYIMPANAN
# -------------------

# Export ke Google Drive
task = ee.batch.Export.image.toDrive(
    image=multi_band_image,
    description='monthly_ssr',
    folder='ssr_EXPORT',
    fileNamePrefix='ERA5_ssr_Monthly_2022_2024',
    region=AOI.geometry(),
    scale=11132,
    crs='EPSG:32748',
    maxPixels=1e13
)
task.start()

#-------------------------
# INFORMASI NAN Awal
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SSR_EXPORT/ERA5_SSR_Monthly_2022_2024.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------
# INFORMASI MISSING
#-------------------

# Step 1: Tambahkan label (YYYY-MM) dan valid_ratio ke setiap image

def add_valid_ratio(image):
    band_name = 'ssr'  # Ganti dengan nama band yang sesuai

    # Mask menunjukkan piksel valid
    mask = image.mask().gt(0)

    # Hitung luas area valid (m¬≤)
    valid_area_image = mask.multiply(ee.Image.pixelArea())
    area_stats = valid_area_image.reduceRegion(
        reducer=ee.Reducer.sum(),
        geometry=AOI.geometry(),  # jika AOI berupa FeatureCollection
        scale=11132,
        maxPixels=1e13
    )

    # Luas valid & total AOI
    valid_area = ee.Number(area_stats.get(band_name))
    total_area = AOI.geometry().area()

    # Rasio valid dan missing
    valid_ratio = valid_area.divide(total_area)
    missing_ratio = ee.Number(1.0).subtract(valid_ratio)

    # Tambahkan ke metadata image
    image = image.set('valid_ratio', valid_ratio)
    image = image.set('missing_ratio', missing_ratio)  # missing ratio as a number (0-1)
    image = image.set('missing_ratio_percent', missing_ratio.multiply(100))  # missing ratio as percentage
    return image


def calculate_monthly_mean_with_ratio(month_offset):
    start = start_date.advance(month_offset, 'month')
    end = start.advance(1, 'month')
    label = start.format('YYYY-MM')

    filtered = era5_collection.filterDate(start, end)
    monthly_mean = filtered.select('surface_net_solar_radiation') \
        .mean() \
        .clip(AOI) \
        .rename('ssr') \
        .set('label', label)

    # Tambahkan valid_ratio dan missing_ratio
    return add_valid_ratio(monthly_mean)

# Step 2: Buat koleksi dengan rasio valid
monthly_collection = ee.ImageCollection(months.map(calculate_monthly_mean_with_ratio))

# Step 3: Konversi ke FeatureCollection untuk ringkasan
def image_to_feature(image):
    return ee.Feature(None, {
        'label': image.get('label'),
        'valid_ratio': image.get('valid_ratio'),
        'missing_ratio_percent': image.get('missing_ratio'),
    })

missing_ratio_fc = monthly_collection.map(image_to_feature)

# Step 4: Cetak hasil
print(missing_ratio_fc.aggregate_array('label').getInfo())
print(missing_ratio_fc.aggregate_array('missing_ratio_percent').getInfo())

#----------------------------------
# INTERPOLATE MISSING VALUE 36 BULAN
# -----------------------------------

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SSR_EXPORT/ERA5_SSR_Monthly_2022_2024.tif'
with rasterio.open(file_path) as src:
    profile = src.profile
    transform = src.transform
    all_data = []

    for i in range(1, src.count + 1):  # Loop through 36 bands
        print(f"üîÑ Memproses band ke-{i}...")
        data = src.read(i)
        rows, cols = np.where(~np.isnan(data))
        z = data[rows, cols]

        if len(z) == 0:
            print(f"‚ö†Ô∏è Band {i} tidak memiliki data valid. Lewat.")
            all_data.append(data)
            continue

        x_coords, y_coords = rasterio.transform.xy(transform, rows, cols)

        ok = OrdinaryKriging(
            x_coords, y_coords, z,
            variogram_model='linear',
            verbose=False,
            enable_plotting=False
        )

        nan_rows, nan_cols = np.where(np.isnan(data))
        x_nan, y_nan = rasterio.transform.xy(transform, nan_rows, nan_cols)

        z_nan = []
        for x, y in tqdm(zip(x_nan, y_nan), total=len(x_nan), desc=f'Band {i}'):
            z_, _ = ok.execute('points', x, y)
            z_nan.append(z_[0])

        z_nan = np.array(z_nan)
        data[nan_rows, nan_cols] = z_nan


        # Tampilkan visualisasi hasil interpolasi
        plt.figure(figsize=(6, 5))
        plt.imshow(data, cmap='coolwarm')
        plt.colorbar(label='Temperature (¬∞C)')
        plt.title(f'Hasil Interpolasi - Band {i}')
        plt.axis('off')
        plt.show()

        # Statistik dasar
        print(f"üìä Statistik Band {i} setelah interpolasi:")
        print(f"- Min: {np.nanmin(data):.2f}")
        print(f"- Max: {np.nanmax(data):.2f}")
        print(f"- Mean: {np.nanmean(data):.2f}")
        print(f"- Std Dev: {np.nanstd(data):.2f}")
        print("-" * 40)

        all_data.append(data) # Fixed indentation

# Simpan semua band
output_path = file_path.replace('.tif', '_NaN_Interpolated.tif')
profile.update(count=36)

with rasterio.open(output_path, 'w', **profile) as dst:
    for i, band_data in enumerate(all_data, start=1):
        dst.write(band_data, i)

print(f"‚úÖ Semua band berhasil diinterpolasi dan disimpan ke {output_path}")

#-------------------
# Downscaling Multi-Band (36 Band)
#-------------------

import rasterio
from rasterio.enums import Resampling
from rasterio.warp import calculate_default_transform, reproject
import matplotlib.pyplot as plt
import numpy as np
import os
from glob import glob
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from skimage.transform import resize
import pandas as pd

# Visualisasi sebelum dan sesudah resampling untuk band pertama
def visualize_comparison(before_array, after_array, title):
    fig, axs = plt.subplots(1, 2, figsize=(12, 5))
    cmap = 'viridis'

    # Ambil band pertama untuk visualisasi
    before_band = np.ma.masked_invalid(before_array[0])
    after_band = np.ma.masked_invalid(after_array[0])

    vmin = min(np.nanmin(before_band), np.nanmin(after_band))
    vmax = max(np.nanmax(before_band), np.nanmax(after_band))

    im1 = axs[0].imshow(before_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[0].set_title("Sebelum Resampling (Band 1)")
    axs[0].set_xlabel("Kolom")
    axs[0].set_ylabel("Baris")
    plt.colorbar(im1, ax=axs[0], orientation="vertical", fraction=0.05)

    im2 = axs[1].imshow(after_band, cmap=cmap, vmin=vmin, vmax=vmax)
    axs[1].set_title("Setelah Resampling 1000m (Band 1)")
    axs[1].set_xlabel("Kolom")
    axs[1].set_ylabel("Baris")
    plt.colorbar(im2, ax=axs[1], orientation="vertical", fraction=0.05)

    plt.suptitle(title, fontsize=14)
    plt.tight_layout(rect=[0, 0, 1, 0.95])
    plt.show()

# Evaluasi statistik untuk semua band
def evaluate_stats_all_bands(before, after, filename):
    results = []
    for band_idx in range(before.shape[0]):
        before_band = before[band_idx]
        after_band = after[band_idx]

        # Resize untuk matching shape
        after_resized = resize(after_band, before_band.shape,
                             order=1, preserve_range=True,
                             anti_aliasing=False)

        mask = ~np.isnan(before_band) & ~np.isnan(after_resized)

        if np.count_nonzero(mask) == 0:
            print(f"‚ö†Ô∏è {filename} Band {band_idx+1} tidak dapat dievaluasi")
            continue

        y_true = before_band[mask]
        y_pred = after_resized[mask]

        mse = mean_squared_error(y_true, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_true, y_pred)
        r2 = r2_score(y_true, y_pred)

        results.append({
            "Filename": filename,
            "Band": band_idx+1,
            "RMSE": rmse,
            "MSE": mse,
            "MAE": mae,
            "R2": r2
        })

    return results

# Fungsi resampling untuk semua band
def resample_raster_to_1km_all_bands(input_path, output_path, visualize=True):
    with rasterio.open(input_path) as src:
        # Baca semua band
        src_nodata = src.nodata if src.nodata is not None else np.nan
        src_array = src.read()  # Shape: (bands, rows, cols)
        src_array = np.where(src_array == src_nodata, np.nan, src_array)
        src_transform = src.transform
        src_crs = src.crs
        src_bounds = src.bounds

        # Hitung transformasi output
        dst_transform, width, height = calculate_default_transform(
            src_crs, src_crs,
            src.width, src.height,
            *src_bounds,
            resolution=1000
        )

        # Siapkan array output
        dst_array = np.full((src.count, height, width), np.nan, dtype=src.dtypes[0])

        # Update metadata
        kwargs = src.meta.copy()
        kwargs.update({
            'driver': 'GTiff',
            'count': src.count,
            'crs': src_crs,
            'transform': dst_transform,
            'width': width,
            'height': height,
            'nodata': src_nodata
        })

        # Proses resampling per band
        with rasterio.open(output_path, 'w', **kwargs) as dst:
            dst_array = np.empty((src.count, height, width), dtype=src.dtypes[0])

            for band in range(src.count):
                reproject(
                    source=src_array[band],
                    destination=dst_array[band],
                    src_transform=src_transform,
                    src_crs=src_crs,
                    dst_transform=dst_transform,
                    dst_crs=src_crs,
                    resampling=Resampling.bilinear
                )
                dst.write(dst_array[band], band+1)

    print(f"‚úÖ {os.path.basename(input_path)} - Resampled dengan NoData: {src_nodata}")

    if visualize:
        visualize_comparison(src_array, dst_array,
                           {os.path.basename(input_path)})

    return src_array, dst_array

# Batch Processing untuk semua file
input_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SSR_EXPORT/NAN"
output_folder = "/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SSR_EXPORT/DOWNSCALED"
os.makedirs(output_folder, exist_ok=True)

raster_files = glob(os.path.join(input_folder, "*.tif"))
all_results = []

for raster_file in raster_files:
    filename = os.path.basename(raster_file)
    output_path = os.path.join(output_folder, f"{os.path.splitext(filename)[0]}_1km.tif")

    # Proses resampling
    before, after = resample_raster_to_1km_all_bands(raster_file, output_path)

    # Evaluasi
    stats = evaluate_stats_all_bands(before, after, filename)
    all_results.extend(stats)

# Simpan hasil evaluasi
df = pd.DataFrame(all_results)
csv_path = os.path.join(output_folder, "eval_all_bands.csv")
df.to_csv(csv_path, index=False)
print(f"üìä Hasil evaluasi 36 band disimpan di: {csv_path}")

#-------------------------
# INFORMASI NAN Downscale
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SSR_EXPORT/ERA5_ssr_Monthly_2022_2024_1KM/ERA5_ssr_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

#-------------------------
# CLIP DOWNSCALED (MULTIBAND)
#-------------------------
import rasterio
from rasterio.mask import mask
import geopandas as gpd
import numpy as np
import os
from glob import glob
import matplotlib.pyplot as plt

# === 1. BACA SHAPEFILE BATAS ADMINISTRASI ===
shapefile_path = '/content/drive/MyDrive/PENGOLAHAN/DKI Jakarta/DKI Jakarta.shp'
gdf = gpd.read_file(shapefile_path)

# === 2. DAFTAR SEMUA FILE RASTER YANG MAU DIOLAH ===
input_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SSR_EXPORT/DOWNSCALED'  # folder berisi hasil resampling
output_folder = '/content/drive/MyDrive/PENGOLAHAN/DATA/Meteorologi-ERA5_22&24/SSR_EXPORT/CLIP'
os.makedirs(output_folder, exist_ok=True)
raster_files = sorted(glob(os.path.join(input_folder, '*.tif')))

# === 3. LOOP UNTUK SETIAP FILE RASTER ===
for raster_path in raster_files:
    with rasterio.open(raster_path) as src:
        raster_data = src.read()  # ‚¨ÖÔ∏è Ambil semua band (multiband)
        raster_meta = src.meta.copy()

        # Cek dan samakan CRS shapefile
        if gdf.crs != src.crs:
            gdf = gdf.to_crs(src.crs)

        # Gunakan nilai nodata asli
        nodata_value = src.nodata

        # Crop dan mask semua band
        out_image, out_transform = mask(
            src,
            gdf.geometry,
            crop=True,
            nodata=nodata_value
        )

        # Update metadata
        out_meta = raster_meta.copy()
        out_meta.update({
            "driver": "GTiff",
            "height": out_image.shape[1],
            "width": out_image.shape[2],
            "count": out_image.shape[0],  # ‚¨ÖÔ∏è Total band
            "transform": out_transform,
            "nodata": nodata_value
        })

        # Nama file output
        filename = os.path.basename(raster_path)
        output_path = os.path.join(output_folder, f"Jakarta_{filename}")

        # Simpan hasil raster clipped
        with rasterio.open(output_path, "w", **out_meta) as dest:
            dest.write(out_image)

        # === VISUALISASI: Band 1 & terakhir ===
        fig, ax = plt.subplots(1, 2, figsize=(12, 6))
        im1 = ax[0].imshow(out_image[0], cmap='viridis')
        ax[0].set_title(f"Band 1: {filename}")
        plt.colorbar(im1, ax=ax[0], fraction=0.046, pad=0.04)

        im2 = ax[1].imshow(out_image[-1], cmap='viridis')
        ax[1].set_title(f"Band {out_image.shape[0]}: {filename}")
        plt.colorbar(im2, ax=ax[1], fraction=0.046, pad=0.04)

        plt.tight_layout()
        plt.show()

    print(f"‚úÖ Processed multiband: {filename}")

#-------------------------
# INFORMASI NAN CLIP
#-------------------------

import rasterio
import numpy as np
import pandas as pd

# 1. Buka file TIFF
tif_path = '/content/drive/MyDrive/SSR_EXPORT/ssr_monthly_clip/Jakarta_ERA5_ssr_Monthly_2022_2024_NaN_resampled.tif'
with rasterio.open(tif_path) as src:
    data = src.read()  # (bands, height, width)
    profile = src.profile

# 2. Siapkan list bulan (label)
start_year = 2022
start_month = 1
labels = []
for i in range(36):
    year = start_year + (start_month + i - 1) // 12
    month = (start_month + i - 1) % 12 + 1
    labels.append(f"{year:04d}-{month:02d}")

# 3. Hitung valid_ratio dan missing_ratio
valid_ratios = []
missing_ratios_percent = []

for i in range(data.shape[0]):  # untuk tiap band
    band = data[i, :, :]
    total_pixels = band.size
    valid_pixels = np.count_nonzero(~np.isnan(band))
    valid_ratio = valid_pixels / total_pixels
    missing_ratio = 1.0 - valid_ratio

    valid_ratios.append(valid_ratio)
    missing_ratios_percent.append(missing_ratio * 100)

# 4. Buat dataframe ringkasan
summary_df = pd.DataFrame({
    'label': labels,
    'valid_ratio': valid_ratios,
    'missing_ratio_percent': missing_ratios_percent
})

# 5. Tampilkan
print(summary_df)

"""# Cleaning Data"""

# prompt: aku mempunyai data csv, berikan kode untuk mengecekan outliernya untuk semua variabel

import pandas as pd

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers

# Load your CSV file into a pandas DataFrame
# Replace 'your_file.csv' with the actual path to your file
try:
  df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_Fix.csv')
except FileNotFoundError:
  print("Error: 'your_file.csv' not found. Please upload your CSV file or provide the correct path.")
  exit()


# Iterate through each column in the DataFrame
for col in df.select_dtypes(include=['number']): #only numerical columns
    outliers = detect_outliers_iqr(df[col])
    print(f"Outliers for {col}:")
    print(outliers)
    print("-" * 20)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Fungsi deteksi outlier dengan IQR
def detect_outliers_iqr(series):
    Q1 = series.quantile(0.25)
    Q3 = series.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = series[(series < lower_bound) | (series > upper_bound)]
    return outliers

# Load data
try:
    df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_Fix_Clean.csv')
    print("‚úÖ File berhasil dimuat.")
except FileNotFoundError:
    print("‚ùå File tidak ditemukan.")
    exit()

# Konversi kolom objek ke numerik jika memungkinkan
for col in df.columns:
    if df[col].dtype == 'object':
        try:
            df[col] = pd.to_numeric(df[col])
        except:
            continue

# Plot boxplot untuk setiap kolom numerik
numeric_cols = df.select_dtypes(include=['number']).columns

for col in numeric_cols:
    outliers = detect_outliers_iqr(df[col])
    print(f"üîç Kolom '{col}': {len(outliers)} outlier")

    plt.figure(figsize=(8, 4))
    sns.boxplot(x=df[col], color='skyblue')
    plt.title(f"Boxplot - {col}")
    plt.xlabel(col)
    plt.grid(True, axis='x', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()

# VERSI CLEAN2

import pandas as pd

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers


try:
  df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/CLEANORMALIZE/Data_Fix_Clean2.csv', sep=';')
except FileNotFoundError:
  print("Error: 'your_file.csv' not found. Please upload your CSV file or provide the correct path.")
  exit()


# Iterate through each column in the DataFrame
for col in df.select_dtypes(include=['number']): #only numerical columns
    outliers = detect_outliers_iqr(df[col])
    print(f"Outliers for {col}:")
    print(outliers)
    print("-" * 20)

# VERSI CLEAN3

import pandas as pd

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers


try:
  df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/CLEANORMALIZE/Data_Fix_Clean3.csv', sep=';')
except FileNotFoundError:
  print("Error: 'your_file.csv' not found. Please upload your CSV file or provide the correct path.")
  exit()


# Iterate through each column in the DataFrame
for col in df.select_dtypes(include=['number']): #only numerical columns
    outliers = detect_outliers_iqr(df[col])
    print(f"Outliers for {col}:")
    print(outliers)
    print("-" * 20)

# VERSI CLEAN4

import pandas as pd

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers


try:
  df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/CLEANORMALIZE/Data_Fix_Clean4.csv', sep=';')
except FileNotFoundError:
  print("Error: 'your_file.csv' not found. Please upload your CSV file or provide the correct path.")
  exit()


# Iterate through each column in the DataFrame
for col in df.select_dtypes(include=['number']): #only numerical columns
    outliers = detect_outliers_iqr(df[col])
    print(f"Outliers for {col}:")
    print(outliers)
    print("-" * 20)

# VERSI CLEAN5

import pandas as pd

def detect_outliers_iqr(data):
    Q1 = data.quantile(0.25)
    Q3 = data.quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    outliers = data[(data < lower_bound) | (data > upper_bound)]
    return outliers


try:
  df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/CLEANORMALIZE/Data_Fix_Clean5.csv', sep=';')
except FileNotFoundError:
  print("Error: 'your_file.csv' not found. Please upload your CSV file or provide the correct path.")
  exit()


# Iterate through each column in the DataFrame
for col in df.select_dtypes(include=['number']): #only numerical columns
    outliers = detect_outliers_iqr(df[col])
    print(f"Outliers for {col}:")
    print(outliers)
    print("-" * 20)

# prompt: aku mempunyai file csv yang masih memiliki outlier, berikan kode menghapus outlier dengan IQR

import pandas as pd

def remove_outliers_iqr(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    df_filtered = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
    return df_filtered

# Load your CSV file into a pandas DataFrame
# Replace 'your_file.csv' with the actual path to your file
try:
    df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_Fix_Clean2.csv')
except FileNotFoundError:
    print("Error: 'Data_Fix_Clean2.csv' not found. Please upload your CSV file or provide the correct path.")
    exit()

# Specify the columns to remove outliers from
columns_to_filter = ['u_component_10m'] # Example, replace with your actual column names

# Remove outliers from specified columns
for col in columns_to_filter:
    if col in df.columns:  # Check if column exists in DataFrame
      df = remove_outliers_iqr(df, col)
    else:
      print(f"Warning: Column '{col}' not found in DataFrame. Skipping outlier removal for this column.")

# Save the filtered data to a new CSV file
df.to_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_NoOutlier.csv', index=False)
print(f"Data without outliers saved to '/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_NoOutlier.csv'")

"""IQR"""

# Fungsi untuk hapus outlier berdasarkan IQR
df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_Fix.csv')
def remove_outliers_iqr(df, columns):
    for col in columns:
        # Check if the column is numeric
        if pd.api.types.is_numeric_dtype(df[col]):
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            # Hapus data yang outlier
            df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
        else:
            print(f"Skipping outlier removal for column '{col}' as it is not numeric.")
    return df

# Deteksi Outlier
plt.figure(figsize=(12, 6))
sns.boxplot(data=df)
plt.xticks(rotation=90)
plt.title("Boxplot Fitur")
plt.show()

# Pilih kolom numerik yang mau dibersihkan
numeric_cols = ['NO2', 'HCHO', 'CO', 'SO2', 'TropomiO3', 'U10', 'V10', 'SP', 'TP', 'E', 'T2M', 'SSR', 'EVI', 'LST', 'NTL', 'StasiunO3']

df_clean = df.copy()

# Hapus outlier
df_clean = remove_outliers_iqr(df_clean, numeric_cols)

print(f"Jumlah data setelah menghapus outlier: {len(df_clean)} baris")

# Save the filtered data to a new CSV file
df_clean.to_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean.csv', index=False)
print(f"Data without outliers saved to '/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean.csv'")

# Deteksi Outlier
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_clean)
plt.xticks(rotation=90)
plt.title("Boxplot Fitur")
plt.show()

# Fungsi untuk hapus outlier berdasarkan IQR
df = pd.read_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean.csv')
def remove_outliers_iqr(df, columns):
    for col in columns:
        # Check if the column is numeric
        if pd.api.types.is_numeric_dtype(df[col]):
            Q1 = df[col].quantile(0.25)
            Q3 = df[col].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - 1.5 * IQR
            upper_bound = Q3 + 1.5 * IQR
            # Hapus data yang outlier
            df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
        else:
            print(f"Skipping outlier removal for column '{col}' as it is not numeric.")
    return df

# Pilih kolom numerik yang mau dibersihkan
numeric_cols = ['NO2', 'HCHO', 'CO', 'SO2', 'TropomiO3', 'U10', 'V10', 'SP', 'TP', 'E', 'T2M', 'SSR', 'EVI', 'LST', 'NTL', 'StasiunO3']

df_clean = df.copy()

# Hapus outlier
df_clean = remove_outliers_iqr(df_clean, numeric_cols)

print(f"Jumlah data setelah menghapus outlier: {len(df_clean)} baris")

# Deteksi Outlier
plt.figure(figsize=(12, 6))
sns.boxplot(data=df_clean)
plt.xticks(rotation=90)
plt.title("Boxplot Fitur")
plt.show()

# Save the filtered data to a new CSV file
df_clean.to_csv('/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean2.csv', index=False)
print(f"Data without outliers saved to '/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean2.csv'")

# Cek fitur kategorikal
categorical_columns = X.select_dtypes(include='object').columns
if len(categorical_columns) > 0:
    print("\nFitur kategorikal ditemukan:", categorical_columns)
    X = pd.get_dummies(X, columns=categorical_columns)

file_path = '/content/drive/MyDrive/PENGOLAHAN/DATA/EKTRAKSI PIKSEL/Hasil Ekstraksi/Ekstraksi Stasiun/Data_clean.csv'  # Ganti dengan path file CSV kamu
numerical_columns = ['NO2', 'HCHO', 'CO', 'SO2', 'TropomiO3', 'U10', 'V10', 'SP', 'TP', 'E', 'T2M', 'SSR', 'EVI', 'LST', 'NTL', 'StasiunO3']

df = pd.read_csv(file_path)
desc_stats = df.describe()

print("Statistik Deskriptif:")
print(df.describe())